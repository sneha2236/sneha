<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>üåä TaskZen - Plan Peacefully</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet"/>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
  <style>
    body {
      font-family: 'Segoe UI', sans-serif;
      background: linear-gradient(135deg, #e0f7fa, #ffffff);
      min-height: 100vh;
      margin: 0;
      padding: 0;
      transition: background-color 0.4s ease;
    }

    .card {
      background-color: #ffffff;
      border-radius: 20px;
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
      transition: 0.3s;
    }

    .form-control, .form-select, .btn {
      border-radius: 25px;
    }

    .btn-primary {
      background-color: #0288d1;
      border: none;
      font-weight: bold;
    }

    .btn-primary:hover {
      background-color: #0277bd;
    }

    .btn-outline-primary {
      border: 2px solid #00acc1;
      color: #00acc1;
      font-weight: bold;
    }

    .btn-outline-primary:hover {
      background-color: #00acc1;
      color: white;
    }

    .priority-badge {
      font-size: 0.75rem;
      padding: 3px 10px;
      border-radius: 12px;
    }

    .high { background-color: #e53935; color: white; }
    .medium { background-color: #fbc02d; color: black; }
    .low { background-color: #43a047; color: white; }

    .category-badge {
      font-size: 0.75rem;
      border-radius: 12px;
      padding: 4px 10px;
      margin-left: 5px;
    }

    .category-General { background-color: #0288d1; color: white; }
    .category-Work { background-color: #00bcd4; color: white; }
    .category-Personal { background-color: #4db6ac; color: white; }
    .category-Urgent { background-color: #e53935; color: white; }

    .progress-bar {
      height: 1rem;
      background: linear-gradient(to right, #00acc1, #0288d1);
      transition: width 0.4s ease;
      border-radius: 30px;
    }

    .quote-box {
      font-style: italic;
      color: #546e7a;
      text-align: center;
      margin-top: 20px;
    }

    .task-footer {
      font-size: 0.8rem;
      text-align: right;
      color: #78909c;
    }

    .notification {
      position: fixed;
      bottom: 20px;
      right: 20px;
      background: #0288d1;
      color: white;
      padding: 12px 24px;
      border-radius: 30px;
      box-shadow: 0 5px 15px rgba(0,0,0,0.25);
      display: none;
      z-index: 9999;
      font-weight: bold;
    }

    .task-item {
      transition: 0.3s;
    }

    .task-item:hover {
      background-color: #f1f8ff;
    }

    .task-item.completed {
      text-decoration: line-through;
      opacity: 0.6;
      background-color: #e3f2fd;
    }

    .dark-mode {
      background-color: #102027 !important;
      color: #e0f2f1 !important;
    }

    .dark-mode .card {
      background-color: #37474f;
    }

    .dark-mode .form-control,
    .dark-mode .form-select {
      background-color: #263238;
      color: white;
    }

    .dark-mode .btn-primary {
      background-color: #00acc1;
    }

    .dark-mode .progress-bar {
      background-color: #00bcd4;
    }

    .dark-mode .category-badge {
      opacity: 0.9;
    }
  </style>
</head>
<body>
  <div class="container py-5">
    <div class="card p-4">
      <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="text-primary">üåä TaskZen - Plan Peacefully</h2>
        <button class="btn btn-outline-primary" onclick="toggleTheme()" id="themeBtn">üåô Dark</button>
      </div>

      <div class="row g-2">
        <div class="col-md-4">
          <input type="text" id="taskInput" class="form-control" placeholder="Add a task...">
        </div>
        <div class="col-md-3">
          <input type="datetime-local" id="deadlineInput" class="form-control">
        </div>
        <div class="col-md-3">
          <select id="priorityInput" class="form-select">
            <option value="low">Low Priority</option>
            <option value="medium">Medium Priority</option>
            <option value="high">High Priority</option>
          </select>
        </div>
        <div class="col-md-2 d-grid">
          <button class="btn btn-primary" onclick="addTask()">Add</button>
        </div>
      </div>

      <div class="mt-3">
        <label class="form-label">Category:</label>
        <select id="categoryInput" class="form-select w-auto d-inline-block">
          <option value="General">General</option>
          <option value="Work">Work</option>
          <option value="Personal">Personal</option>
          <option value="Urgent">Urgent</option>
        </select>
      </div>

      <ul id="taskList" class="list-group mt-4"></ul>

      <div class="mt-4">
        <div class="d-flex justify-content-between align-items-center">
          <span>Progress</span>
          <span id="taskCount"></span>
        </div>
        <div class="progress">
          <div id="progressBar" class="progress-bar" style="width: 0%"></div>
        </div>
      </div>

      <div class="quote-box" id="quoteBox">üåü "Stay focused, stay positive, stay productive."</div>
      <div class="task-footer mt-3">üóÇÔ∏è Tip: Double-click a task to toggle its status. Use the üåô button to switch themes!</div>
    </div>
  </div>

  <div id="notification" class="notification"></div>

  <script>
    let tasks = JSON.parse(localStorage.getItem('tasks') || '[]');

    const quotes = [
      "üåü Believe you can and you're halfway there.",
      "üöÄ Push yourself, because no one else is going to do it for you.",
      "üî• Great things never come from comfort zones.",
      "üéØ Dream it. Wish it. Do it.",
      "üí° Stay focused, stay positive, stay productive."
    ];

    function showRandomQuote() {
      const quote = quotes[Math.floor(Math.random() * quotes.length)];
      document.getElementById("quoteBox").textContent = quote;
    }

    function showNotification(message) {
      const note = document.getElementById('notification');
      note.textContent = message;
      note.style.display = 'block';
      setTimeout(() => note.style.display = 'none', 3000);
    }

    function updateProgress() {
      const total = tasks.length;
      const done = tasks.filter(t => t.done).length;
      const percent = total === 0 ? 0 : (done / total) * 100;
      document.getElementById("taskCount").textContent = `‚úÖ ${done}/${total} Completed`;
      document.getElementById("progressBar").style.width = `${percent}%`;
    }

    function renderTasks() {
      const list = document.getElementById('taskList');
      list.innerHTML = '';
      tasks.forEach((task, i) => {
        const item = document.createElement('li');
        item.className = `list-group-item d-flex justify-content-between align-items-start task-item ${task.done ? 'completed' : ''}`;
        item.innerHTML = `
          <div ondblclick="toggleTask(${i})">
            <div class="fw-bold">${task.text} <span class="priority-badge ${task.priority}">${task.priority}</span></div>
            <small class="text-muted">üïí ${task.time}${task.deadline ? ' | üìÖ ' + new Date(task.deadline).toLocaleString() : ''} <span class="category-badge category-${task.category}">${task.category}</span></small>
          </div>
          <div>
            <button class="btn btn-sm btn-outline-danger" onclick="deleteTask(${i})">‚ùå</button>
          </div>
        `;
        list.appendChild(item);
      });
      updateProgress();
      showRandomQuote();
    }

    function addTask() {
      const text = document.getElementById('taskInput').value.trim();
      const deadline = document.getElementById('deadlineInput').value;
      const category = document.getElementById('categoryInput').value;
      const priority = document.getElementById('priorityInput').value;
      if (!text) return alert('Please enter a task!');
      const newTask = {
        text,
        done: false,
        deadline,
        category,
        priority,
        time: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
      };
      tasks.push(newTask);
      saveAndRender();
      document.getElementById('taskInput').value = '';
      document.getElementById('deadlineInput').value = '';
      showNotification('‚úÖ Task added!');
    }

    function toggleTask(index) {
      tasks[index].done = !tasks[index].done;
      saveAndRender();
      showNotification(tasks[index].done ? '‚úîÔ∏è Task marked complete!' : '‚è≥ Task marked incomplete.');
    }

    function deleteTask(index) {
      if (confirm("Delete this task?")) {
        tasks.splice(index, 1);
        saveAndRender();
        showNotification('üóëÔ∏è Task deleted.');
      }
    }

    function saveAndRender() {
      localStorage.setItem('tasks', JSON.stringify(tasks));
      renderTasks();
    }

    function toggleTheme() {
      document.body.classList.toggle('dark-mode');
      const btn = document.getElementById('themeBtn');
      btn.textContent = document.body.classList.contains('dark-mode') ? '‚òÄÔ∏è Light' : 'üåô Dark';
    }

    renderTasks();
  </script>
</body>
</html>
